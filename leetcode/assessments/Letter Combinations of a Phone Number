class Solution {
public:
    vector<string> letterCombinations(string digits) {
        // Mapping of digits to corresponding letters
        unordered_map<char, string> hash = {
            {'2', "abc"}, {'3', "def"}, {'4', "ghi"},
            {'5', "jkl"}, {'6', "mno"}, {'7', "pqrs"},
            {'8', "tuv"}, {'9', "wxyz"}
        };

        vector<string> result;

        // If the input is empty, return an empty result
        if (digits.empty()) {
            return result;
        }

        // Helper function for backtracking
        function<void(string&, int)> backtrack = [&](string& combination, int index) {
            // Base case: if the combination is complete
            if (index == digits.size()) {
                result.push_back(combination);
                return;
            }

            // Get the characters corresponding to the current digit
            char digit = digits[index];
            string letters = hash[digit];

            // Iterate through each letter and continue the backtracking
            for (char letter : letters) {
                combination.push_back(letter);        // Add the letter to the combination
                backtrack(combination, index + 1);   // Move to the next digit
                combination.pop_back();             // Backtrack
            }
        };

        string combination;
        backtrack(combination, 0); // Start backtracking from the first digit
        return result;
    }
};
