/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int closestValue(TreeNode* root, double target) {
        int closest = root->val;
        double SmallestDiff = abs(root->val - target); 
        while(root != nullptr) {
            cout << root->val << endl;
            double difference = abs(root->val - target);
            if (difference < SmallestDiff) {
                SmallestDiff = difference;
                closest = root->val;
            } else if (difference == SmallestDiff) {
                if (root->val < closest) {
                    closest = root->val;
                }
            }
            
            if (root->val - target > 0) {
                root = root->left;
            } else root = root->right;
            
        }
        return closest;
    }
};
