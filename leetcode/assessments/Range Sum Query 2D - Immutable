class NumMatrix {
private:
    vector<vector<int>> prefixSum; // Prefix sum matrix
public:
    NumMatrix(vector<vector<int>>& matrix) {
        int rows = matrix.size();
        int cols = matrix[0].size();

        // Initialize prefixSum with extra row and column
        prefixSum = vector<vector<int>>(rows + 1, vector<int>(cols + 1, 0));

        // Compute prefix sums
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= cols; j++) {
                prefixSum[i][j] = matrix[i - 1][j - 1]
                                + prefixSum[i - 1][j]
                                + prefixSum[i][j - 1]
                                - prefixSum[i - 1][j - 1];
            }
        }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        // Adjust for the extra row and column in prefixSum
        row1++;
        col1++;
        row2++;
        col2++;

        // Use the inclusion-exclusion principle
        return prefixSum[row2][col2]
             - prefixSum[row1 - 1][col2]
             - prefixSum[row2][col1 - 1]
             + prefixSum[row1 - 1][col1 - 1];
    }
};
