/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private: 
int diameter = 0;
public:

    int helper(TreeNode* root) {
        if (root == nullptr) {
            return 0;
        }

        // Calculate height of left and right subtrees
        int leftHeight = helper(root->left);
        int rightHeight = helper(root->right);

        // Update the diameter: maximum path length through this node
        diameter = max(diameter, leftHeight + rightHeight);

        // Return the height of the subtree rooted at this node
        return 1 + max(leftHeight, rightHeight);
    }

    int diameterOfBinaryTree(TreeNode* root) {
        helper(root); // Call helper to calculate diameter
        return diameter; // Return the maximum diameter found
    }
};
