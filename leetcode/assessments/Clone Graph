/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if (!node) {
            return nullptr; // Return null if the input graph is empty
        }
        
        // Map to store original node -> cloned node
        unordered_map<Node*, Node*> visited;
        
        // Call the explicitly defined clone function
        return clone(node, visited);
    }

private:
    // Explicitly defined clone function
    Node* clone(Node* current, unordered_map<Node*, Node*>& visited) {
        // If the node is already cloned, return the clone
        if (visited.count(current)) {
            return visited[current];
        }

        // Create a clone for the current node
        Node* cloneNode = new Node(current->val);
        visited[current] = cloneNode; // Mark the current node as visited

        // Clone all the neighbors
        for (Node* neighbor : current->neighbors) {
            cloneNode->neighbors.push_back(clone(neighbor, visited));
        }

        return cloneNode;
    }
};
